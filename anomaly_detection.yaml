AWSTemplateFormatVersion: "2010-09-09"
Description: Anomaly detection project infrastructure.

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: anomaly-detection-data
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  SNSAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: anomaly-alert-topic

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
        - PolicyName: SNSPublish
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref SNSAlertTopic
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  AnomalyDetectionLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: anomaly-detection-function
      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3

          def handler(event, context):
              # Placeholder logic for anomaly detection
              # Replace with actual detection logic and processing
              sns = boto3.client("sns")
              topic_arn = "<your-sns-topic-arn>"
              message = "Anomaly detected!"
              sns.publish(TopicArn=topic_arn, Message=message)
              return {
                  "statusCode": 200,
                  "body": json.dumps("Notification sent!")
              }
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Bucket

Outputs:
  S3BucketName:
    Value: !Ref S3Bucket
    Description: S3 bucket name for anomaly data.

  SNSAlertTopicArn:
    Value: !Ref SNSAlertTopic
    Description: ARN of the SNS alert topic.

  LambdaFunctionName:
    Value: !Ref AnomalyDetectionLambda
    Description: The name of the anomaly detection Lambda function.
